name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # It's recommended to run golangci-lint in a job separate from other jobs (go test, etc) because different jobs run in parallel.
  go-linter:
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          # Pin the version in case all the builds start to fail at the same time.
          # There may not be an automatic way (e.g., dependabot) to update a specific parameter of a GitHub Action,
          # so we will just update it manually whenever it makes sense (e.g., a feature that we want is added).
          version: v1.60.3
          args: --build-tags e2e,unit --fix=false --timeout=5m --out-format=colored-line-number
  unit-tests:
    strategy:
      fail-fast: false
      matrix:
        go: [ '1.23', '1.24' ]
        os: [ ubuntu-latest, windows-latest ]

    name: Unit Tests / ${{ matrix.os }} / Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: build
        run: make build
      - name: test-unit
        run: make test-unit
  e2e-tests-for-awslogs:
    strategy:
      fail-fast: false
      matrix:
        go: [ '1.23', '1.24' ]
        os: [ ubuntu-latest ] # TODO: Add Windows e2e tests: https://github.com/aws/shim-loggers-for-containerd/issues/68
    name: E2E tests / awslogs / ${{ matrix.os }} / Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: Start LocalStack
        shell: bash
        run: scripts/start-localstack
      - name: install and start containerd
        shell: bash
        run: sudo scripts/install-containerd
      - name: start ecs local endpoint
        shell: bash
        run: scripts/start-ecs-local-endpoint
      - name: ip forwarding # awslogs driver hardcodes "169.254.170.2" as the aws credential endpoint ip so need to forward to local endpoint
        shell: bash
        run: sudo scripts/ip-forwarding
      - name: build
        run: sudo make build
      - name: test-e2e
        run: sudo -E make test-e2e-for-awslogs # containerd interaction requires sudo and aws cloudwatch interaction requires passing env vars
  e2e-tests-for-fluentd:
    strategy:
      fail-fast: false
      matrix:
        go: [ '1.23', '1.24' ]
        os: [ ubuntu-latest ] # TODO: Add Windows e2e tests: https://github.com/aws/shim-loggers-for-containerd/issues/68
    name: E2E tests / fluentd / ${{ matrix.os }} / Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: install and start containerd
        shell: bash
        run: sudo scripts/install-containerd
      - name: start fluentd local endpoint
        shell: bash
        run: scripts/start-fluentd-local-endpoint
      - name: build
        run: sudo make build
      - name: test-e2e
        run: sudo make test-e2e-for-fluentd # containerd interaction requires sudo
  e2e-tests-for-splunk:
    strategy:
      fail-fast: false
      matrix:
        go: [ '1.23', '1.24' ]
        os: [ ubuntu-latest ] # TODO: Add Windows e2e tests: https://github.com/aws/shim-loggers-for-containerd/issues/68
    name: E2E tests / splunk / ${{ matrix.os }} / Go ${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache: false
      - name: install and start containerd
        shell: bash
        run: sudo scripts/install-containerd
      - name: start splunk local endpoint
        id: splunk-local-endpoint
        shell: bash
        run: |
          SPLUNK_PASSWORD=1234567Aa!
          SPLUNK_PORT=8089
          SPLUNK_IMAGE=splunk/splunk
          CONTAINER_ID=$(docker run -d -p $SPLUNK_PORT:8089 -p 8088:8088 \
          -e "SPLUNK_START_ARGS=--accept-license" \
          -e "SPLUNK_PASSWORD=$SPLUNK_PASSWORD" \
          -e "SPLUNK_HEC_TOKEN=abcd1234" \
          $SPLUNK_IMAGE)
          
          : # Splunk can only receives requests after becoming healthy
          until [ $(docker inspect $CONTAINER_ID --format ‘{{.State.Health.Status}}’) == ‘healthy’ ]; do sleep 10s; done;
          
          curl -L -k -u admin:$SPLUNK_PASSWORD \
          -X POST https://localhost:$SPLUNK_PORT/services/admin/token-auth/tokens_auth \
          -d disabled=false
          : # Wait for token to be enabled
          sleep 5
          TOKEN_OUTPUT=$(curl -L -k -u admin:$SPLUNK_PASSWORD \
          -X POST https://localhost:$SPLUNK_PORT/services/authorization/tokens?output_mode=json \
          -d name=admin -d audience=tests)
          SPLUNK_TOKEN=$(echo $TOKEN_OUTPUT | jq -r '.entry[0].content.token')
          echo "SPLUNK_TOKEN=$SPLUNK_TOKEN" >> $GITHUB_OUTPUT
      - name: build
        run: sudo make build
      - name: test-e2e
        run: |
          sudo SPLUNK_TOKEN=${{ steps.splunk-local-endpoint.outputs.SPLUNK_TOKEN }} make test-e2e-for-splunk # containerd interaction requires sudo
  go-mod-tidy-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
      # TODO: Use `go mod tidy --check` after https://github.com/golang/go/issues/27005 is fixed.
      - run: go mod tidy
      - run: git diff --exit-code
  mdlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: avto-dev/markdown-lint@v1
        with:
          args: '**/*.md'

